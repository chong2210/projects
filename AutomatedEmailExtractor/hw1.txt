Your first homework assignment is to create a client that manages the following Google Cloud SaaS applications: Gmail and Sheets. Your client will create a worksheet whose name is DDMMYYYY, where DD stands for a given day, MM for the month, and YYYY is for the year. Your client will listen to your Gmail account and will check to see if new messages arrived. When the client detects new messages, it extracts the time of their delivery and the subjects of the newly delivered message and it insert this information into the corresponding cells in the worksheet for the given day/month/year. You can complete this homework using either Java (I prefer you to use Java for this first assignment) or Go or Clojure or Scala and you will use Gradle for building the project and running automated tests. You will use the latest community version of IntelliJ IDE for this assignment.

The first step is to examine developers pages for Google Sheets and Gmail, review examples, and learn how to use the Application Programming Interface (API) calls. The links to the Sheets and the Gmail API documentations foare the following:
https://developers.google.com/sheets
https://developers.google.com/gmail

and quickstart examples for Java can be located by following the URLs below.
https://developers.google.com/sheets/quickstart/java
https://developers.google.com/gmail/api/quickstart/java

The test for your implementation should include the following steps. You will provide a script to send an email to your gmail account from the command line. The script should take command-line parameters for the subject of the email and the sender's email address. If the user does not provide any command-line parameters, the script should send an email using default hard-coded values. After the email arrives to your gmail account, the client will detect this email automatically, and then your client program will extract the delivery time and the subject of this email and it will enter them into a worksheet cells that this client will create in Google Sheets using your predefined URL.

Here is an example of the script to send an email automatically from the Windows Powershell:
$EmailFrom = “yourgmailadress@gmail.com”
$EmailTo = “destination@somedomain.com”
$Subject = “The subject of your email”
$Body = “What do you want your email to say”
$SMTPServer = “smtp.gmail.com”
$SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, 587) $SMTPClient.EnableSsl = $true $SMTPClient.Credentials = New-Object System.Net.NetworkCredential(“usr”,
“pass”);
$SMTPClient.Send($EmailFrom, $EmailTo, $Subject, $Body)

If the OS is Linux or some other flavor of Unix, sending an email from a command line can be accomplished using the commands sendmail, mail, or mutt.

You are added as a member of UIC_CS441_2016 team in Bitbucket. Separate repositories will be created for each of your homeworks and for the course project. You will receive a URI to the git repository for your homework. You will fork this repository and your fork will be private, no one else besides you, the TA and your course instructor will have access to your fork. You can commit and push your code as many times as you want. Your code will not be visible and it should not be visible to other students. When you push it, your instructor and the TA will see a separate private fork. Making your fork public will result in losing your grade. For grading, only the latest push timed before the deadline will be considered. If you push after the deadline, your grade for the homework will be zero. For more information about using git and bitbucket specifically, please use this link as the starting point https://confluence.atlassian.com/bitbucket/bitbucket-cloud-documentation-home-221448814.html.

This is an individual homework, so it cannot be done collaboratively. However, I allow you to post questions and replies, statements, comments, discussion, etc. on Piazza. Remember that you cannot share your code and your solutions, but you can ask and advise others using Piazza on where resources and sample programs can be found on the internet, how to resolve dependencies and configuration issues, and how to design the logic of the algorithm. Yet, your implementation should be your own and you cannot share it. Alternatively, you cannot copy and paste someone else's implementation and put your name on it. Your submissions will be checked for plagiarism. When posting question and answers on Piazza, please select the appropriate folder, i.e., hw1 to ensure that all discussion threads can be easily located.

Submission deadline: Saturday, Sept 17 at 9PM CST. Your submission will include your source code, the Gradle build configuration, the README.md file in the root directory that contains the description of your implementation, how to compile and run it using Gradle, and what are the limitations of your implementation.
You will create your google account for this purpose that will not contain your private information. Your README.md should contain the following
statement: "I authorize Prof.Grechanik and his RAs and TAs to use my google account credentials for this project for academic and research purposes. I understand the risk of sharing my private information with this account." If you cannot include your statement for some reason, you will have to arrange a meeting with the TA to verify how your submission works without revealing your account login and the password.

Evaluation criteria:
- no comments or insufficient comments: up to 2% lost
- no tests: up to 5% lost
- code does not compile or it crashes without completing the core
functionality: up to 3% lost
- the documentation is missing or insufficient to understand how to compile and run your program: up to 3% lost
- only a subset of tests works: up to 2% lost.
- the minimum grade for this homework cannot be less than zero.